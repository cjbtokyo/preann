@startuml img/uml/classLoop.png

package "Loop" as LoopPkg{

Loop <--> LoopFunction

Loop <|-- RangeLoop
Loop <|-- ExpLoop
Loop <|-- EnumLoop
Loop <|-- JoinEnumLoop

Loop --> JoinEnumLoop : friend

Loop <-- Plot
LoopFunction <-- Plot

class LoopFunction{
    #ParametersMap* tParameters
    #std::string tLabel
    #Loop* tCallerLoop;
    #unsigned tLeaf;
    #GenericLoopFuncPtr tFunction
    #LoopFunction(ParametersMap*, label)
    +LoopFunction(GenericLoopFuncPtr, ParametersMap*, label)
    +ParametersMap* getParameters()
    #void __executeImpl()
    void preLoop()
    +void execute(Loop* callerLoop)
}
abstract class Loop{
    #std::string key
    #Loop* innerLoop
    #void __repeatBase(LoopFunction* func)
    #{abstract}void __repeatImpl(LoopFunction* func)
    +virtual void addInnerLoop(Loop* innerLoop)
    +void repeatFunction(LoopFunction*, ParametersMap*)
}
class RangeLoop{
    -float i, min, max, inc
    +RangeLoop(key, min, max, inc)
    #void __repeatImpl(LoopFunction*)
}
class ExpLoop{
    -float i, min, max, factor
    +ExpLoop(key, min, max, factor)
    #void __repeatImpl(LoopFunction*)
}
class EnumLoop{
    -EnumType enumType
    -vector<unsigned> valueVector
    -unsigned i
    +EnumLoop(key, EnumType)
    #void __repeatImpl(LoopFunction*)
}
class JoinEnumLoop{
    -EnumType enumType
    -vector<unsigned> valueVector
    -vector<Loop*> tInnerLoops
    -unsigned i
    +JoinEnumLoop(key, EnumType)
    #void __repeatImpl(LoopFunction*)
}
class Plot{
    +ParametersMap parameters
    #PlotData plotData
    +Plot(plotPath, RangeLoop* xToPlot, yLabel)
    +void plot(GenericPlotFunctionPtr yFunction, title, Loop* linesLoop)
    +void customPlot(title, CustomPlotFillAction* fillArrayAction, Loop* linesLoop)
} 

} 
'Loop

package "Loopers"{

Loop <-- Test
LoopFunction <-- Test

Plot <|-- ChronoPlotter
Plot <|-- TaskPlotter

class Test{
    +ParametersMap parameters
    +{static} unsigned assertEquals(Buffer* expected, Buffer* actual)
    +void test(TestFunctionPtr, label, Loop*)
    +void testMemoryLosses(GenericLoopFuncPtr, label, Loop*)
}
class ChronoPlotter{
    +void plotChrono(ChronoFunctionPtr func, title, Loop* linesLoop, repetitions)
}
class TaskPlotter{
    +void plotTask(Task* task, std::string title, Loop* linesLoop)
    +void plotTask(std::string title, Loop* linesLoop)
}


} 
'Loopers

@enduml

